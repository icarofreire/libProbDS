/*
 * This source file was generated by the Gradle 'init' task
 */
package org.lib;
import java.util.Random;
/*
class SkipListNode {
    int value;
    SkipListNode[] forward;

    // @SuppressWarnings("unchecked")
    public SkipListNode(int value, int level) {
        this.value = value;
        this.forward = new SkipListNode[level + 1];
    }
}

public class SkipList2 {
    private static final double P = 0.5; // Probability for level generation
    private static final int MAX_LEVEL = 16; // Maximum levels allowed

    private final SkipListNode head;
    private int level;
    private final Random random;

    public SkipList2() {
        this.head = new SkipListNode(0, MAX_LEVEL);
        this.level = 0;
        this.random = new Random();
    }

    private int randomLevel() {
        int lvl = 0;
        while (random.nextDouble() < P && lvl < MAX_LEVEL) {
            lvl++;
        }
        return lvl;
    }

    public void insert(int value) {
        SkipListNode[] update = new SkipListNode[MAX_LEVEL + 1];
        SkipListNode current = head;

        // Locate insertion point
        for (int i = level; i >= 0; i--) {
            while (current.forward[i] != null && current.forward[i].value < value) {
                current = current.forward[i];
            }
            update[i] = current;
        }

        // Insert new node
        int newLevel = randomLevel();
        if (newLevel > level) {
            for (int i = level + 1; i <= newLevel; i++) {
                update[i] = head;
            }
            level = newLevel;
        }

        SkipListNode newNode = new SkipListNode(value, newLevel);
        for (int i = 0; i <= newLevel; i++) {
            newNode.forward[i] = update[i].forward[i];
            update[i].forward[i] = newNode;
        }
    }

    public boolean search(int value) {
        SkipListNode current = head;

        for (int i = level; i >= 0; i--) {
            while (current.forward[i] != null && current.forward[i].value < value) {
                current = current.forward[i];
            }
        }
        current = current.forward[0];

        return current != null && current.value == value;
    }

    public void delete(int value) {
        SkipListNode[] update = new SkipListNode[MAX_LEVEL + 1];
        SkipListNode current = head;

        for (int i = level; i >= 0; i--) {
            while (current.forward[i] != null && current.forward[i].value < value) {
                current = current.forward[i];
            }
            update[i] = current;
        }

        current = current.forward[0];

        if (current != null && current.value == value) {
            for (int i = 0; i <= level; i++) {
                if (update[i].forward[i] != current) break;
                update[i].forward[i] = current.forward[i];
            }
            while (level > 0 && head.forward[level] == null) {
                level--;
            }
        }
    }

    public void print() {
        for (int i = 0; i <= level; i++) {
            SkipListNode node = head.forward[i];
            System.out.print("Level " + i + ": ");
            while (node != null) {
                System.out.print(node.value + " ");
                node = node.forward[i];
            }
            System.out.println();
        }
    }

    public static void teste() {
        SkipList2 skipList = new SkipList2();

        // skipList.insert(3);
        // skipList.insert(6);
        // skipList.insert(7);
        // skipList.insert(9);
        // skipList.insert(12);
        // skipList.insert(19);

        int[] dataStream = {10, 20, 15, 5};
        // Insert values into the Skip List
        java.util.Arrays.stream(dataStream).forEach((element) -> skipList.insert(element));

        System.out.println("Skip List after insertions:");
        skipList.print();

        System.out.println("\nSearch for 7: " + skipList.search(7));
        System.out.println("Search for 15: " + skipList.search(15));

        skipList.delete(6);
        System.out.println("\nSkip List after deletion of 6:");
        skipList.print();
    }
}
*/