/*
 * This source file was generated by the Gradle 'init' task
 */
package org.lib;

import java.lang.Math;

/**
 * Bloom Filter: A Bloom filter is a space-efficient data structure used to test whether an
 * element is a member of a set. It can have false positives but no false negatives.
 * 
 * Pros: Can store additional information beyond membership, efficient space utilization.
 * Cons: Higher false positive rate, limited support for deletion.
 * 
 * Use Cases:
 * 
 * Web caching: Web caching systems like Squid use Bloom filters to check if a requested URL
 * is already cached, avoiding unnecessary disk lookups.
 * Database systems: Bloom filters can be used to speed up query processing in databases by
 * quickly determining if a specific record exists in a large dataset without scanning the entire dataset.
 * Spell checking: Bloom filters can be used to store a dictionary of correctly spelled words,
 * allowing for fast spell checking by querying the filter for a given word.
 */
class BloomFilter {

    private int size;
    private boolean[] storage;

    BloomFilter(int size) {
        this.size = size;
        this.storage = new boolean[size];
    }

    // Simple hash functions
    public int hash1(int value) {
        return value % this.size;
    }

    public int hash2(int value) {
        return (value * 7) % this.size;
    }

    // Add an element to the Bloom filter
    public void add(int value) {
        this.storage[this.hash1(value)] = true;
        this.storage[this.hash2(value)] = true;
    }

    // Check if an element is in the Bloom filter
    public boolean contains(int value) {
        return (
            this.storage[this.hash1(value)] && this.storage[this.hash2(value)]
        );
    }

    public static void teste() {
        // Usage example
        var bloomFilter = new BloomFilter(100);
        bloomFilter.add(10);
        System.out.println(bloomFilter.contains(10)); // true
        System.out.println(bloomFilter.contains(20)); // false (or true if there's a false positive)

        Teste.very(bloomFilter.contains(10) == true, true);
        Teste.very(bloomFilter.contains(20) == false, true);
    }
}
