/*
 * This source file was generated by the Gradle 'init' task
 */
package org.lib;

import java.util.Arrays;
import java.util.HashSet;


/**
 * https://medium.com/@asishpanda444/hyperloglog-hll-4bb1f201524e
 */
public class HyperLogLog2 {
    private final int[] buckets;
    private final int numBuckets;
    private final int p;

    // Constructor
    public HyperLogLog2(int p) {
        this.p = p;
        this.numBuckets = 1 << p; // 2^p buckets
        this.buckets = new int[numBuckets];
    }

    // Hash function (using Javaâ€™s built-in hashCode for simplicity)
    private int hash(String item) {
        return item.hashCode();
    }

    // Add an element
    public void add(String item) {
        int hash = hash(item);
        int bucketIndex = hash >>> (Integer.SIZE - p); // First p bits
        int remainder = hash & ((1 << (Integer.SIZE - p)) - 1); // Remaining bits
        int leadingZeros = Integer.numberOfLeadingZeros(remainder) + 1; // Position of leftmost 1
        buckets[bucketIndex] = Math.max(buckets[bucketIndex], leadingZeros);
    }

    // Estimate cardinality
    public double estimate() {
        double sum = 0.0;
        for (int bucket : buckets) {
            sum += 1.0 / (1 << bucket);
        }
        double alpha = getAlpha(numBuckets);
        double rawEstimate = alpha * numBuckets * numBuckets / sum;

        // Small cardinality correction
        if (rawEstimate <= 2.5 * numBuckets) {
            int zeroBuckets = (int) Arrays.stream(buckets).filter(b -> b == 0).count();
            if (zeroBuckets > 0) {
                return numBuckets * Math.log((double) numBuckets / zeroBuckets);
            }
        }

        // Large cardinality correction
        if (rawEstimate > (1 << 30)) {
            return -((1 << 31) - rawEstimate); // Overflow protection
        }

        return rawEstimate;
    }

    // Bias correction constant
    private double getAlpha(int m) {
        switch (m) {
            case 16:
                return 0.673;
            case 32:
                return 0.697;
            case 64:
                return 0.709;
            default:
                return 0.7213 / (1 + 1.079 / m);
        }
    }

    // Main method for testing
    public static void teste() {
        HyperLogLog2 hll = new HyperLogLog2(4); // 16 buckets

        // Add elements
        hll.add("apple");
        hll.add("banana");
        hll.add("cherry");
        hll.add("apple");
        hll.add("date");

        // Estimate cardinality
        System.out.println("Estimated cardinality: " + hll.estimate());
    }
}