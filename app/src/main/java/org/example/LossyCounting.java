/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.lang.Math;
import java.util.Map;
import java.util.HashMap;

/**
 * Lossy Counting: Lossy Counting is a probabilistic data structure designed to estimate the
 * frequencies of items in a data stream while using limited memory by periodically removing
 * low-count elements from the frequency table. This makes it suitable for identifying elements
 * in large and continuously evolving datasets whose frequency count exceeds a user-given threshold.
 * 
 * Pros: Efficient estimation of item frequencies, constant memory usage.
 * Cons: May have higher error rates for low-frequency items, not suitable for precise frequency counting.
 * 
 * Use Cases:
 * 
 * Web analytics: Lossy Counting is useful for estimating the frequency of web page visits or clickstream events.
 * It allows for real-time monitoring and analysis of user interactions, helping to identify popular pages,
 * detect anomalies, or perform traffic analysis.
 * Network traffic analysis: Lossy Counting can be applied to network traffic monitoring to estimate the frequencies
 * of different types of network packets or protocols. It enables efficient traffic analysis and anomaly detection,
 * helping to identify patterns or potential security threats.
 * Market basket analysis: In retail or e-commerce settings, Lossy Counting can estimate item frequencies in customer
 * transaction data. It enables the identification of frequently co-occurring items, such as items commonly purchased together, 
 * helping businesses to optimize inventory management, suggest product recommendations, or design targeted marketing campaigns.
 */
public class LossyCounting {

    private double epsilon = 0.00001; // Maximum error tolerance
    private double bucketSize = Math.ceil(1 / this.epsilon); // Size of each frequency bucket
    private HashMap<Character, Integer> buckets = new HashMap<>(); // Map to store item-frequency pairs
    private int totalItems = 0; // Total number of items processed
    private int currentBucketIndex = 0; // Index of the current bucket

    public LossyCounting() {
    }

    public LossyCounting(double epsilon) {
        this.epsilon = epsilon; // Maximum error tolerance
    }

    public void add(char item) {
        this.totalItems++;

        if (this.buckets.containsKey(item)) {
            // Increment the frequency of existing item in the current bucket
            this.buckets.put(item, this.buckets.get(item) + 1);
        } else {
            // Add the item to the current bucket with a frequency of 1
            this.buckets.put(item, 1);
        }

        // Check if it is time to remove infrequent items from the data structure
        if (this.totalItems % this.bucketSize == 0) {
            this.removeInfrequentItems();
        }
    }

    public void removeInfrequentItems() {
        for(Map.Entry<Character, Integer> entry : buckets.entrySet()){
            var key = entry.getKey();
            var value = entry.getValue();
            if (value <= this.currentBucketIndex) {
                this.buckets.remove(key);
            }
        }
        this.currentBucketIndex++;
    }

    public int estimateFrequency(char item) {
        if (this.buckets.containsKey(item)) {
            return this.buckets.get(item);
        }

        return 0;
    }

    public static void teste(){
        // Create a new Lossy Counting data structure with epsilon of 0.1
        LossyCounting lossyCounting = new LossyCounting(0.1);

        Character[] dataStream = {'A', 'B', 'A', 'C', 'A', 'B', 'A', 'A', 'C', 'A'};

        // Add items to the data structure
        java.util.Arrays.stream(dataStream).forEach((element) -> lossyCounting.add(element));

        // Estimate the frequency of items
        System.out.println("Frequency of 'A':" + lossyCounting.estimateFrequency('A')); // 6
        System.out.println("Frequency of 'B':" + lossyCounting.estimateFrequency('B')); // 2
        System.out.println("Frequency of 'C':" + lossyCounting.estimateFrequency('C')); // 2
        System.out.println("Frequency of 'D':" + lossyCounting.estimateFrequency('D')); // 0
    }

}
